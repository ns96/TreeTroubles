/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package treeml;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import org.rosuda.REngine.REXP;
import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.Rserve.RConnection;
import org.rosuda.REngine.Rserve.RserveException;

/**
 *
 * @author nathan
 */
public class TreeMLFrame extends javax.swing.JFrame implements MouseListener {
    private RConnection c;
    private RserveTalk rserveTalk;
    private String[][] mainData;
    private DataImagePanel imagePanel;
    private int expander = 40;
    private Set<String> featureList = new TreeSet<>();
    private int sampleFrequency = 50;
    
    /**
     * Creates new form MLViewerFrame
     */
    public TreeMLFrame() {
        initComponents();
    }
    
    /**
     * set the connection to the r session
     * @param c 
     */
    public void setConnection(RConnection c) {
        this.c = c;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        okButton = new javax.swing.JButton();
        loadDataButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        sortByTextField = new javax.swing.JTextField();
        sortByButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        featureTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        buildFeaturesCheckBox = new javax.swing.JCheckBox();
        clearButton = new javax.swing.JButton();
        dataframeTextField = new javax.swing.JTextField();
        sliceTextField = new javax.swing.JTextField();
        invertCheckBox = new javax.swing.JCheckBox();
        plotCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ML Viewer 0.1");

        okButton.setText("Close");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        loadDataButton.setText("Load Data");
        loadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataButtonActionPerformed(evt);
            }
        });

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        consoleTextArea.setText("Console");
        jScrollPane2.setViewportView(consoleTextArea);

        sortByTextField.setText("cat112");
        sortByTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByTextFieldActionPerformed(evt);
            }
        });

        sortByButton.setText("Sort By");
        sortByButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save Image");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        featureTextArea.setColumns(20);
        featureTextArea.setRows(5);
        jScrollPane3.setViewportView(featureTextArea);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Feature List");

        runButton.setText("Run ML");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        buildFeaturesCheckBox.setSelected(true);
        buildFeaturesCheckBox.setText("Capture");

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        dataframeTextField.setText("train_e");
        dataframeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataframeTextFieldActionPerformed(evt);
            }
        });

        sliceTextField.setText("25");
        sliceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sliceTextFieldActionPerformed(evt);
            }
        });

        invertCheckBox.setSelected(true);
        invertCheckBox.setText("Invert for ML");
        invertCheckBox.setToolTipText("");

        plotCheckBox.setText("Plot");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadDataButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataframeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(sortByButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sortByTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(buildFeaturesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(invertCheckBox)
                            .addComponent(plotCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buildFeaturesCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(plotCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(invertCheckBox))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(okButton)
                        .addComponent(loadDataButton)
                        .addComponent(sortByTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sortByButton)
                        .addComponent(saveButton)
                        .addComponent(clearButton)
                        .addComponent(dataframeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sliceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(runButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        c.close();
        System.exit(0);
    }//GEN-LAST:event_okButtonActionPerformed

    private void loadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataButtonActionPerformed
        try {
            String dataframe = dataframeTextField.getText();
            sampleFrequency = Integer.parseInt(sliceTextField.getText());
            
            if(rserveTalk == null) {
                connectToR(dataframe);
            }
            
            mainData = rserveTalk.getDataFrameAsStringArray(dataframe);
            
            // test saving the image
            BufferedImage image = rserveTalk.generateImage(mainData, sampleFrequency, expander);
            
            imagePanel = new DataImagePanel(image);
            jScrollPane1.setViewportView(imagePanel);
            
            // add the mouse listener
            imagePanel.addMouseListener(this);
            
            consoleTextArea.setText("Main data loaded ... " + dataframe + "/ obs: " +mainData.length);
        } catch(RserveException | REXPMismatchException ex) {
            Logger.getLogger(TreeMLFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadDataButtonActionPerformed

    private void sortByTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByTextFieldActionPerformed
        sortByButtonActionPerformed(evt);
    }//GEN-LAST:event_sortByTextFieldActionPerformed

    private void sortByButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByButtonActionPerformed
        try {
            String dataframe = dataframeTextField.getText();
            sampleFrequency = Integer.parseInt(sliceTextField.getText());
            
            if(rserveTalk == null) {
                connectToR(dataframe);
            }
            
            String feature = sortByTextField.getText();
            c.eval("allS1 <- " + dataframe + "[order(" + dataframe + "$" + feature + "), ]");
            mainData = rserveTalk.getDataFrameAsStringArray("allS1");
            
            BufferedImage image = rserveTalk.generateImage(mainData, sampleFrequency, expander);
            
            imagePanel = new DataImagePanel(image);
            imagePanel.setSortBy(feature);
            
            jScrollPane1.setViewportView(imagePanel);
            
            // add the mouse listener
            imagePanel.addMouseListener(this);
        } catch (RserveException | REXPMismatchException ex) {
            Logger.getLogger(TreeMLFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sortByButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            File file = new File("C:/temp/allsData_"+ imagePanel.getSortBy() + ".png");
            ImageIO.write(imagePanel.getImage(), "PNG", file);
        } catch (IOException ex) {
            Logger.getLogger(TreeMLFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void connectToR(String dataframe) throws RserveException, REXPMismatchException {
        // load the dataframe if needed
        int loaded = c.eval("exists('" + dataframe + "')").asInteger();

        if (loaded == 0) {
            REXP x1 = c.eval("load('C:/temp/rdata/allS.RData')");
            
            if(dataframe.equals("train_e")) {
                c.eval("cat112Subset()");
            } 
            System.out.println(x1.asString());
        }

        rserveTalk = new RserveTalk(c);
    }
    
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        String dataframe = dataframeTextField.getText();
        
        MLRunnerDialog runnerDialog = new MLRunnerDialog(this, false);
        runnerDialog.setConnection(c);
        runnerDialog.setColumns(dataframe, featureList, mainData, invertCheckBox.isSelected());
        runnerDialog.pack();
        runnerDialog.setVisible(true);
    }//GEN-LAST:event_runButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        featureList.clear();
        featureTextArea.setText("");
        consoleTextArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void sliceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sliceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sliceTextFieldActionPerformed

    private void dataframeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataframeTextFieldActionPerformed
        loadDataButtonActionPerformed(evt);
    }//GEN-LAST:event_dataframeTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TreeMLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TreeMLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TreeMLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TreeMLFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TreeMLFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox buildFeaturesCheckBox;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JTextField dataframeTextField;
    private javax.swing.JTextArea featureTextArea;
    private javax.swing.JCheckBox invertCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton loadDataButton;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox plotCheckBox;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField sliceTextField;
    private javax.swing.JButton sortByButton;
    private javax.swing.JTextField sortByTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
        int x = me.getX();
        int y = me.getY();
        
        // need to convert the x cordinate to location in data matrix based on expader variable of 40
        int xIndex = (int)((x/expander) + 1);
        int yIndex = y*sampleFrequency + 1;
        
        String colname = mainData[0][xIndex];
        String value = mainData[yIndex][xIndex];
        
        consoleTextArea.setText("Mouse at X: " + x + " Feature: " + colname + "\n");
        consoleTextArea.append("Mouse at Y: " + y + " Value: " + value + "\n\n");
        
        if(buildFeaturesCheckBox.isSelected()) {
            featureTextArea.setText("");
            
            featureList.add(colname);
            for(String feature: featureList) {
                featureTextArea.append(feature + "\n");
            }        
        }
        
        if(plotCheckBox.isSelected()) {
            plotFeature(colname);
        }
    }

    @Override
    public void mousePressed(MouseEvent me) { }

    @Override
    public void mouseReleased(MouseEvent me) { }

    @Override
    public void mouseEntered(MouseEvent me) { }

    @Override
    public void mouseExited(MouseEvent me) { }

    private MLRunnerDialog MLRunnerDialog() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * Plots a features vs the log loss
     * @param value 
     */
    private void plotFeature(String feature) {
        try {
            c.eval("plotFeature('" + feature + "', " + sampleFrequency + ")");
            REXP xp = c.eval("r = readBin('featurePlot.png','raw',1024*1024)");
            //c.eval("unlink('featurePlot.png'); r");
            
            Image plotImage = Toolkit.getDefaultToolkit().createImage(xp.asBytes());
            JLabel picLabel = new JLabel(new ImageIcon(plotImage));
            
            JDialog dialog = new JDialog(this,"Feature Plot: " + feature, false);
            dialog.add(picLabel);
            dialog.pack();
            dialog.setVisible(true);
        } catch (RserveException | REXPMismatchException ex) {
            Logger.getLogger(TreeMLFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
