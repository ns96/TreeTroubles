/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package treeml;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import org.rosuda.REngine.REXP;
import org.rosuda.REngine.Rserve.RConnection;

/**
 *
 * @author nathan
 */
public class AnalyzeDialog extends javax.swing.JDialog {
    private RConnection c = null;
    private RserveTalk rserveTalk = null;
    
    private TreeInsightFrame treeInsightFrame = null;
    private ArrayList<String> treeIdList = null;
    private String zipcode = null;
    private int mlrunTimer = 0;
    private boolean forceStop = false;
    
    private DefaultListModel<PredictionResults> listModel = null;
    private PredictionResults currentPrediction = null;
    
    /**
     * Creates new form AnalyzeDialog
     */
    public AnalyzeDialog(TreeInsightFrame parent, ArrayList<String> treeIdList, String zipcode) {
        super(parent, false);
        this.treeInsightFrame = parent;
        this.treeIdList = treeIdList;
        this.zipcode = zipcode;
        this.c = parent.getConnection();
        this.rserveTalk = parent.getRserveTalk();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        speciesComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        speciesTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        progressBar = new javax.swing.JProgressBar();
        saveButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        timerLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultsJList = new javax.swing.JList();
        stopButton = new javax.swing.JButton();
        plotButton = new javax.swing.JButton();
        blocksCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        speciesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Near By Trees", "Trees In Zipcode" }));

        jLabel1.setText("Species From");
        jLabel1.setToolTipText("");

        speciesTextField.setColumns(2);
        speciesTextField.setText("5");

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        jScrollPane1.setViewportView(consoleTextArea);

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(resultsTable);

        saveButton.setText("Export");
        saveButton.setActionCommand("Export as CSV");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        timerLabel.setText("Timer: 0 sec");
        timerLabel.setToolTipText("");

        resultsJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        resultsJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultsJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resultsJListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(resultsJList);

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        plotButton.setText("Plot");
        plotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });

        blocksCheckBox.setText("Blocks");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(speciesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(speciesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(blocksCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(runButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(timerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                                .addComponent(plotButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(closeButton))
                            .addComponent(jScrollPane3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(closeButton)
                        .addComponent(speciesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(speciesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(saveButton)
                        .addComponent(runButton)
                        .addComponent(timerLabel)
                        .addComponent(stopButton)
                        .addComponent(plotButton)
                        .addComponent(blocksCheckBox))
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    
    /**
     * This is where we actual run the code
     * @param evt 
     */
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        consoleTextArea.append("Running model ...\n\n");
        progressBar.setIndeterminate(true);
        runButton.setEnabled(false);
        
        // clear out the results list
        resultsJList.removeAll();
        listModel = new DefaultListModel<>();
        resultsJList.setModel(listModel);
        
        // start the timer
        mlrunTimer = 0;
        final Timer SimpleTimer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timerLabel.setText("Timer: " + mlrunTimer++ + " secs");
            }
        });
        SimpleTimer.start();
        
        Thread t = new Thread() {
            public void run() {
                try {
                    String speciesCount = speciesTextField.getText();
                    String zc = zipcode;
                    String blocks = "No";
                    
                    if(speciesComboBox.getSelectedIndex() == 0) {
                        zc = "-1";
                    }
                    
                    if(blocksCheckBox.isSelected()) {
                        blocks = "Yes";
                    }
                    
                    int loop = 1;
                    
                    for(String tree_id:  treeIdList) {
                        consoleTextArea.append(loop + " Processing Tree " + tree_id + " ...\n");
                        
                        c.eval("df <- makePrediction(" + tree_id + "," + zc + "," + speciesCount + ", '"+ blocks +"')");
                        int damageCount = c.eval("getDamageCount(df)").asInteger();
                        c.eval("plotPrediction(df)");
                        REXP xp = c.eval("r = readBin('predictionPlot.png','raw',1024*1024)");
                        //c.eval("unlink('featurePlot.png'); r");
                        
                        // get and store the results for this prediction
                        String[][] predData = rserveTalk.getDataFrameAsStringArray("df");
                        DefaultTableModel tableModel = treeInsightFrame.getTableModel(predData);
                        
                        Image plotImage = Toolkit.getDefaultToolkit().createImage(xp.asBytes());
                        
                        // create the prediction result
                        PredictionResults pr = new PredictionResults(tree_id, tableModel, plotImage, damageCount);
                        listModel.addElement(pr);
                        
                        loop++;
                        if(forceStop) {
                            consoleTextArea.append("\n****Modeling Stopped****\n");
                            break;
                        }
                    }
                    
                    // we finished modeling                    
                    consoleTextArea.append("\n****Modeling Done (Total Time: " + mlrunTimer + " secs) ****\n");
                } catch (Exception ex) {
                    consoleTextArea.append("****Fatal Error****\n");
                    Logger.getLogger(AnalyzeDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                // reset some variables
                SimpleTimer.stop();
                forceStop = false;
                mlrunTimer = 0;
                
                progressBar.setIndeterminate(false);
                runButton.setEnabled(true);
                timerLabel.setText("Timer: 000");
            }
        };
        
        t.start();
    }//GEN-LAST:event_runButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        forceStop = true;
    }//GEN-LAST:event_stopButtonActionPerformed

    private void resultsJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_resultsJListValueChanged
        if(evt.getValueIsAdjusting() == false) {
            int index = resultsJList.getSelectedIndex();
            if(index != -1) {
                currentPrediction = listModel.get(index);
                resultsTable.setModel(currentPrediction.getTableModel());
            
                System.out.println(index + " Current prediction: " + currentPrediction);
            }
        }
    }//GEN-LAST:event_resultsJListValueChanged

    private void plotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotButtonActionPerformed
        if(currentPrediction != null) {
            JLabel picLabel = new JLabel(new ImageIcon(currentPrediction.getPlotImage()));
            
            JDialog dialog = new JDialog(this,currentPrediction.toString(), false);
            dialog.add(picLabel);
            dialog.pack();
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_plotButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox blocksCheckBox;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton plotButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JList resultsJList;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox speciesComboBox;
    private javax.swing.JTextField speciesTextField;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
}
